def learnh_da():
  set_analog_inputrange(0, 0)
  set_analog_inputrange(1, 0)
  set_analog_inputrange(2, 1)
  set_analog_inputrange(3, 0)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(24)
  set_runstate_outputs([])
  set_payload(0.1)
  set_gravity([0.0, 0.0, 9.82])
  $ 26 "rotate"
  def rotate():
    global rotate_axis = request_string_from_primary_client("welche achse soll bewegt werden?")
    varmsg("rotate_axis",rotate_axis)
    if (rotate_axis =="x"):
      movel(pose_add(get_actual_tcp_pose(),p[0.0,0.0,0.0,d2r(-40),0.0,0.0]))
    else:
      if (rotate_axis =="y"):
        movel(pose_add(get_actual_tcp_pose(),p[0.0,0.0,0.0,0.0,d2r(-40),0.0]))
      else:
        if (rotate_axis =="z"):
          movel(pose_add(get_actual_tcp_pose(),p[0.0,0.0,0.0,0.0,0.0,d2r(-40)]))
        else:
          popup("aaa", title="Message", blocking=True)
        end
      end
    end
  end
  $ 36 "justify"
  def justify():
    global justieren = request_boolean_from_primary_client("roboter justieren?")
    varmsg("justieren",justieren)
    while (justieren ==  True  ):
      global richtung = request_boolean_from_primary_client("runter ~> ja  hoch ~> nein")
      varmsg("richtung",richtung)
      if (richtung ==  True  ):
        global justify_dir = 0.5
        varmsg("justify_dir",justify_dir)
      else:
        global justify_dir = -0.5
        varmsg("justify_dir",justify_dir)
      end
      while digital_in[1] == False :
        sync()
      end
      thread Thread_while_45():
        while (True):
          movel(pose_add(get_actual_tcp_pose(),p[0.0,0.0,justify_dir,0.0,0.0,0.0]),a=0.5,v=0.1)
        end
      end
      if ( digital_in[1]  ==  True  ):
        global thread_handler_45=run Thread_while_45()
        while ( digital_in[1]  ==  True  ):
          sync()
        end
        kill thread_handler_45
      end
      global justieren = request_boolean_from_primary_client("roboter justieren?")
      varmsg("justieren",justieren)
    end
    global blaue_seite_st = get_actual_joint_positions()
    varmsg("blaue_seite_st",blaue_seite_st)
  end
  while (True):
    $ 2 "Roboterprogramm"
    $ 3 "programm_forset≔ True "
    global programm_forset =   True  
    varmsg("programm_forset",programm_forset)
    $ 4 "rote_seite≔ False "
    global rote_seite =   False  
    varmsg("rote_seite",rote_seite)
    $ 5 "blaue_seite_st≔[1.2639,-2.5147,-1.3484,-0.8468,-1.57,0.1046]"
    global blaue_seite_st = [1.2639,-2.5147,-1.3484,-0.8468,-1.57,0.1046]
    varmsg("blaue_seite_st",blaue_seite_st)
    $ 6 "pos≔blaue_seite_st"
    global pos = blaue_seite_st
    varmsg("pos",pos)
    $ 7 "p_name≔'name des patienten?'"
    global p_name = request_string_from_primary_client("name des patienten?")
    varmsg("p_name",p_name)
    $ 8 "socket_open('141.100.101.48',8000)"
    socket_open("141.100.101.48",8000)
    $ 9 "socket_send_string('new_patient')"
    socket_send_string("new_patient")
    $ 10 "FahreAchse"
    $ 11 "pos"
    movej(pos, a=1.3962634015954636, v=1.0471975511965976)
    $ 12 "Rufen justify"
    justify()
    $ 13 "Während programm_forset"
    while (programm_forset):
      $ 14 "pos≔blaue_seite_st"
      global pos = blaue_seite_st
      varmsg("pos",pos)
      $ 15 "FahreAchse"
      $ 16 "pos"
      movej(pos, a=1.3962634015954636, v=1.0471975511965976)
      $ 17 "Rufen rotate"
      rotate()
      $ 18 "If rote_seite≟ False "
      if (rote_seite ==  False  ):
        $ 19 "movel(pose_add(get_actual_tcp_pose(),p[0.0,0.0,0.0,d2r(-40),0.0,0.0]),a=0.5,v=0.1)"
        movel(pose_add(get_actual_tcp_pose(),p[0.0,0.0,0.0,d2r(-40),0.0,0.0]),a=0.5,v=0.1)
        $ 20 "rote_seite≔ True "
        global rote_seite =   True  
        varmsg("rote_seite",rote_seite)
      else:
        $ 21 "Else"
        $ 22 "rote_seite≔ False "
        global rote_seite =   False  
        varmsg("rote_seite",rote_seite)
      end
      $ 23 "Schleife 4 Mal"
      Schleife_4 = 0
      while Schleife_4 < 4:
        $ 24 "Warten DI[1]=HI"
        while digital_in[1] == False :
          sync()
        end
        pos=get_actual_joint_positions()
        pos=[pos[0],pos[1],pos[2],pos[3],pos[4],pos[5]+d2r(71.299)]
        movej(pos,a=d2r(80),v=d2r(60))
        Schleife_4 = Schleife_4 + 1
      end
    end
  end
end

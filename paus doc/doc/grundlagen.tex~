\chapter{Grundlagen}

Die Themen lose Kopplung, Webentwicklung mit dem \sona{Django}-Framework, die Einhaltung der \ac{REST}-Prinzipien, die Nutzung von \sona{elasticsearch} dienen alle der Bedienung von Einfachheit in Struktur und Verarbeitung und damit der Einfachheit von Nutzung und Wartung.

\section{Lose Kopplung}
\label{lose_kopplung_gru}

Teilkomponenten einer Software agieren häufig miteinander. Lose Kopplung
beschreibt den Zustand, dass die einzelnen Komponenten (Teile) der Software von
einander möglichst unabhängig sind, "So wenige Schnittstellen wie möglich, so viele wie nötig." Ändert sich eine Komponente, jedoch nicht deren Schnittstelle, müssen die gekoppelten Komponenten nicht geändert werden. 
\\
Lose Kopplung erleichtert
Portierbarkeit, Skalierbarkeit, Erweiterbarkeit und Wartbarkeit. Als Nachteil
stellt sich in einigen Fällen eine schlechtere Performanz ein. Diese ist bei
vielen System, dank der hohen Systemleistung, aber vernachlässigbar und wird
daher billigend in Kauf genommen.
\\
Bei loser Kopplung sind globale Variablen oder öffentliche Attribute zu vermeiden, damit keine Softwarestati entstehen. Das erlaubt jeder Komponente, sofern sie kommunikationsbereit ist, ohne Vorbedingungen zu kommunizieren.
\\
Abbildung einfügen!!!!

\section{Die Programmiersprache Python}
\label{python_gru}

\sona{Python} ist unter anderem eine prozedurale Programmiersprache. Allerdings werden
auch andere Programmierparadigmen von ihr vereint. So ist es zum Beispiel auch
möglich, objektorientiert\footnote{Informationen zum Thema Objektorientierung
finden Sie hier
\url{http://openbook.galileocomputing.de/oop/oop_kapitel_01_001.htm#mj311565c5c46a3b13daf9951e408cac80}},
oder funktional\footnote{Hier finden Sie einen Artikel zum Thema funktionale Programmierung:
\url{http://www.linux-magazin.de/Online-Artikel/Funktionale-Programmierung-1-Grundzuege}} zu programmieren.
Der vom Entwickler erzeugte Quellcode wird kompiliert. Der daraus entstandene Byte-Code kann dann
vom Interpreter einer virtuellen Maschine ausgeführt werden. Der Einsatz einer
virtuellen Maschine macht Python plattformunabhängig.
\\
Im Lieferumfang von Python ist eine sehr mächtige Standardbibliothek enthalten.
Sie ermöglicht es dem Entwickler schnell und einfach strukturierte Anwendungen
zu programmieren, die sehr komplexe Aufgaben verrichten und lösen können. Gerne
wird Python für die Prototypentwicklung eingesetzt. Auf Grund der Einfachkeit, 
mit der man Software erstellen kann, lassen sich die Prototypen schnell
entwickeln. Auf diese Weise kann man schon früh Designfehler der
späteren Software entdecken und beheben.
\\
Python wird unter einer \ac{PSF}-Lizenz vertrieben. Diese Lizenz ist weniger
einschränkend als die \ac{GNU}-Lizens und erlaubt es, den
\sona{Python}-Software lizenzkostenfrei in große, kommerzielle Projekte
einzubinden.
\\
Ein herausragendes Merkmal von \sona{Python} ist seine hohe Flexibilität. Daher
findet es nicht nur Einsatz als Programmiersprache in kleinen und großen
Projekten, sondern wird auch serverseitig im Internet und als
Skriptsprache in anderen Programiersprachen eingesetzt und gewinnt immer mehr an
Wichtigkeit im wachsenden Markt von Embedded-Systemen.
\\
Python ist mit dem Anspruch entwickelt worden, für den Entwickler möglichst
einfach zu sein. Dies spiegelt sich schon in seiner Syntax wieder. Diese ist
leicht und schnell zu erlernen. Dabei wird vor allem auf sauber formatierten
Quellcode geachtet. Bei vielen Programmiersprachen (\sona{Java} oder
\sona{C/C++}) wird ein Befehl durch eine "` ; "' abgeschlossen, der Inhalt einer
Schleife mit "`\{\ldots\}"' eingefasst, in \sona{Python} wird dies über
Einrückung gesteuert (Siehe Listing \ref{lst:bsppytsum}).
\begin{lstlisting}[caption={Beispielfunktion in Python zur Berechnung der Summe
aller Zahlen von 1 bis 5}\label{lst:bsppytsum},captionpos=t]
def sum_1_5{self}:
    sum = 0
    for i in range(1,5):
        sum=sum+i
        print sum
    print sum
 \end{lstlisting}
 \\
Der "`range()"'-Befehl liefert die Zahlen 1 bis 5 in Form einer Liste. Die
"`for"'-Schleife durchläuft mit jedem Iterationsschritt diese Liste und legt die jeweils Zahl in die Variable i. Man sieht sofort, dass die einzelnen Befehle
der Funktion nicht durch ein "` ; "' abgeschlossen werden und es keine
einfassenden geschweiften Klammern bei der "`for"'-Schleife gibt. Der
"`print"'-Aufruf in der Schleife gibt bei jedem Durchlauf den aktuellen
Inhalt der Variable "`sum"' auf der Konsole aus. Die letzte Zeile
Code gibt einmalig das Endergebnis nach dem vollständigen durchlaufen der
Schleife aus. Der Compiler erwartet zum Einrücken eines hierarchisch untergeordnetem Quellcodes immer die gleiche Folge von Leerzeichen bzw. Tabulatoren. Ein unter Programmierern üblicher Standard ist das Einrücken mit vier Leerzeichen.
\\
Mit Hilfe der sogenannten \sona{Python}-\ac{API} ist es möglich, die
Standardbibliothek von \sona{Python} flexibel zu erweitern. Auf diese Weise
können auch Komponenten in anderen Programmiersprachen an \sona{Python}
angebunden werden, z.B C/C++ Module, die im Gegensatz zu \sona{Python}, sehr hardwarenahe sind.
\\
Die Popularität von \sona{Python} nimmt immer mehr zu. Unter anderem setzt die
\fina{NASA} diese Programmiersprachen ein. Aber auch Internetnutzer
kommen inzwischen tagtäglich mit Produkten auf Basis von \sona{Python} in Kontakt, z.B. mit \href{http://www.youtube.com/}{Youtube}\footnote{} oder
\href{https://www.google.de}{Google}\footnote{}. Der Entwickler der Programmiersprache
\sona{Python}, Guido van Rossum, arbeitet heute sogar selbst für \fina{Google}.

\section{Webentwicklung mit Django}
\label{sec:django_gru}

"`\sona{Django} ist ein hochwertiges \sona{Python} Web Framework zur schnellen
Entwicklung und für sauberes, praktisches Design."' So könnte man den
Einleitungssatz auf der Internetseite des \sona{Django}-Projektes übersetzten:
Django is a high-level Python Web framework that encourages rapid development
and clean, pragmatic design \cite{DJANGO-2013}.
\begin{figure}[ht]
  \centering
    \includegraphics[width=0.8\textwidth]{pic/MTV_1.jpg}
      \caption{Ablauf eines Request vom Client/Browser an den Server und die
      Response des Servers an den Client/Browser.}
      \label{fig:mtv}
\end{figure}
\\
Wie man der Graphik \ref{fig:mtv} entnehmen kann, ist das
\sona{Django}-Framework nach dem \ac{MTV}-Muster (In der Graphik \ref{fig:mtv}
grau hinterlegt) aufgebaut. Die View verarbeitet den Request. Über das
entsprechenden Model werden die Daten aus der Datenbank geholt. Die View
verarbeitet dieses Model und dessen Daten mit Hilfe eines Templates und erzeugt
eine Response, die dann über den Webserver an den Client weitergeleitet wird.
Dieser Aufbau ist dem \ac{MVC}-Muster nachempfunden.
\\
Abbildung zu Unterschied MVC vs MTV einbinden!!!!
\\
Die \ac{MTV}-Architektur, ein zentrales Designmuster der Informatik, entkoppelt Rohdaten von deren Darstellung, sodass Datenbank und Darstellung der Daten unabhängig von einander ausgetauscht werden können. Die \ac{MTV}-Architektur wird von dem \sona{Django}-Framework hervorragend nachgebildet. 
\\
Die Komponenten des \sona{Django}-Frameworks sind lose gekoppelt und nach dem \ac{DRY}-Prinzip aufgebaut. Es gilt zu
verhindern, gleiche Funktionen mehrfach zu implementieren. Änderungen und Fehlerbehebungen müssen dann an genau einer Stelle im Quellcode durchgeführt werden. Der Code sollte an einer Stelle stehen, an der man ihn auch erwartet. Dies erleichtert die Verständlichkeit und Wartbarkeit des Programms.
\begin{figure}[ht]
  \centering
    \includegraphics[width=0.6\textwidth]{pic/ordnerhirachie_basis.jpg}
      \caption{Ordnerhierarchie direkt nach dem Erzeugen des Projektes euSDB.}
      \label{fig:ordnerhirachie_basis}
\end{figure}
\\
\begin{table}
 \caption{Beschreibung der Dateien im Projektverzeichnis und
 dem Konfigurationsverzeichnis und deren Aufgaben.}
 \begin{tabular}{|p{0.15\textwidth}|p{0.17\textwidth}|p{0.59\textwidth}|l|l|l|}
 \hline \textbf{Dateiname} & \textbf{Verzeichnis} & \textbf{Aufgabe}\\
     \hline \hline 
     manage.py & Projekt & Das \sona{Django}-Framework enthällt eine Datei mit
     dem Namen "`django-admin.py"'. Mit dieser Datei werden fast alle
     administrativen Aufgaben über die Eingabeaufforderung gesteuert. In ihr ist
     auch ein Webserver zum Test des Projektes enthalten. Die "`manage.py"'
     leitet die Befehle an die "`django-admin.py"' weiter und legt vorher das
     Projekt auf den richtigen Pfad, sodass es korrekt vom Framework verarbeitet
     werden kann und setzt die Variable "`DJANGO\_SETTINGS\_MODULE"' so, dass
     sie auf die "`settings.py"' im Konfigurationsverzeichnis zeigt.
     \\ 
     \hline
     \_\_inti\_\_.py & Konfiguration & Diese Datei sorgt dafür, dass das
     Verzeichnis als "`package"' (Packet) erkannt wird. Nur Dateien, die in
     einem package sind können in andere Dateien importiert werden.
     \\ 
     \hline
     settings.py & Konfiguration & Hier werden die Projektweiten Einstellungen
     gespeichert. Zu diesen gehören zum Beispiel die Anbindung an eine
     Datenbank (Siehe Anhang \ref{settings} Zeile 15 - 24) oder auch Angaben zu
     statischen Verzeichnissen (Siehe Anhang \ref{settings} Zeile 54 - 60).
     \\ 
     \hline
     urls.py & Konfiguration & In dieser Datei werden die möglichen \ac{URL} mit
     Hilfe von regulären Ausdrücken abgelegt und mit den entsprechenden Views
     verknüpft. Dies erlaubt es elegant und leicht höchst flexibele \ac{URL}
     nach eigenen Wünschen und Bedürfnissen zu erzeugen. Es ist auch möglich,
     dynamische \ac{URL} zu bauen.
     \\ 
     \hline
     wsgi.py & Konfiguration & Die Datei dient später beim Veröffentlichen des
     Projektes dazu, dass der Webserver eine Verbindung zu dem Projekt
     herstellen kann und dieses dann für Clients und Browser über das
     Internet zugreifbar ist.
     \\ 
     \hline
  \end{tabular}
 \label{tab:datei_bedeutung_i}
\end{table}
Die Entwicklung einer neuen Webanwendung in \sona{Django} erfolgt in einem
sogenannten Projekt. Beim Erstellen eines Projektes erhält man das Projektverzeichnis
mit dem gleichnamigen Konfigurationsverzeichnis (Siehe Abbildung
\ref{fig:ordnerhirachie_basis}). Außerdem werden die für das Framework
unbedingt notwendigen Dateien erzeugt. Tabelle
\ref{tab:datei_bedeutung_i} enthällt die Kurzbeschreibungen der einzelnen Dateien im
Projekt- und Konfigurationsvereichnis.
\\
Das Projekt kann um viele Anwendungen, sogenannten \ac{APP}, erweitert werden. Eine \ac{APP} ist dabei in sich
abgeschlossen und wird als eigener Ordner im Projektverzeichnis abgelegt. Hat man eine Webseite mit Gäßtebuch und Benutzerverwaltung, dann stellt sowohl das Gäßtebuch als auch die Benutzerverwaltung jeweils eine eigene \ac{APP} dar. Auf diese Weise kann man das Gäßtebuch einfach
entfernen, ohne die Funktionalität der Benutzerverwaltung zu beeinflussen.  
\begin{figure}[ht]
  \centering
    \includegraphics[width=0.6\textwidth]{pic/ordnerhirachie_mit_app.jpg}
      \caption{Ordnerhierarchie nach dem Erzeugen der ersten APP}
      \label{fig:ordnerhirachie_mit_app}
\end{figure}
\\
Der Aufbau des Projektes mit \ac{APP} unterstützt die lose Kopplung der Anwendungen. Eine \ac{APP} steht dem Projekt erst zur
Verfügung, wenn man diese im Konfigurationsverzeichnis in der "`settings.py"' des Projektes \sona{euSDB} unter "INSTALLED_APPS", Zeile 91 bis 103, Anhang \ref{settings}
bekannt gemacht hat. 
\\
Eine von der "`manage.py"' erzeugt \ac{APP} besteht dabei immer aus folgenden
Dateien: \_\_init\_\_.py, models.py, test.py, views.py. Die Ordnerhierarchie
können Sie auch der Abbildung \ref{fig:ordnerhirachie_mit_app} entnehmen. Auf die
genaue Funktion der einzelen Dateien finden Sie im  Kapitel
\ref{chap:umsetzung} ein.
\\
Es kann sinnvoll sein die entsprechende Struktur zu erweitern.
Zum Beispiel um eine \ac{APP}-interne "`urls.py"'. Diese muss man dann nur in
der Projektweiten "`urls.py"' importieren. Auf diese Weise wird eine noch losere
Kopplung der \ac{APP} gewährleistet. Bei der Einbindung muss man nur
den Import der "`urls.py"' (eine Zeile) einfügen und die \ac{APP} in der
"`settings.py"' bekannt machen, und nicht jede einzelne \ac{URL} (mehrere
Zeilen) um die App in das Gesammtprojekt einzubinden. Auch ist es mit einer
\ac{APP}-internen "`urls.py"' einfacher eine \ac{APP} in ein anderes Projekt zu
portieren. In manchen Fällen, je nachdem welchen Funktionsumfang eine \ac{APP}
hat werden noch andere Komponenten benutzt, wie z.B. Serialisierer oder
Administration. Diese werden ebenfalls in eigene Dateien ausgelagert.

\section{Das REST-Prinzip}
\label{sec:rest_prinzip_gru}

\ac{REST} ist ein Programmierparadigma, dass für die Webentwicklung von großer
Bedeutung ist. Es hat sich über viele Jahre seit der kommerziellen Nutzung des
Internets entwickelt und ist auch heute, mehr als 20 Jahre nach der Einführung des
Internets noch nicht am Ende seiner Entwicklung. Die Forderungen der
REST-Prinzipien ergeben sich aus den Problemen, die bei der Entwicklung von
größeren Anwendungslandschaften und der firmenübergreifenden Integration von
Daten entstehen:
\begin{itemize}
  \item Lose Kopplung
  \item Interoperabilität
  \item Wiederverwendung
  \item Performance und Skalierbarkeit
\end{itemize}
Diese Probleme versucht man durch Einführung mehrerer Grundprinzipien bei der
Erstellung von Webanwendungen zu lösen bzw. zu umgehen.
Man fast sie unter dem Begriff \ac{REST} zusammen:
\begin{itemize}
  \item Ressoucen und deren unterschiedliche Repräsentationen
  \item Ressourcen mit eindeutiger Identifikation
  \item Verknüpfungen und Hypermedia
  \item Standardmethoden
  \item Statuslose Komunikation
\end{itemize}
In den folgenden Abschnitten  wird \ac{REST} an Hand der Grundprinzipien
erklärt.

\subsection{Ressourcen und Repräsentationen}
\label{res_u_rep_gru}

Ressourcen sind die Menge an Datensätzen, die in einer Webanwendung
serverseitig verarbeitet und verwaltet werden. Liegen die Daten bei einem
Client vor, spricht man von Repräsentationen der Ressourcen. Zum Beispiel gibt
es bei einer Benutzerverwaltung für ein Internetkaufhaus die Ressource "`User"'.
Sie wird definiert durch Parameter, in unserem Beispiel durch "`Name"' und
"`E-Mail"'. Listing  \ref{lst:format_i_gru} zeigt eine Repräsentation der
Ressource anhand  eines \ac{HTML}-Dokumentes.
\begin{lstlisting}[
    caption={HTML Dokument für die Ausgabe eines Users. }
    \label{lst:format_i_gru},
    captionpos=t]
<!DOCTYPE html>
<html>
    <head>
    	<title>Benutzerverwaltung - Max Mustermann</title> 
    </head>
    <body>
        <h1>Max Mustermann</h1>
        <p>E-Mail: max.mustermann@bsp.de</p>
    </body>
</html>
\end{lstlisting}
\\
Je mehr Datenformate man beim Abruf von Repräsentationen unterstützt, desto
leichter wird es für Entwickler sich an eine \ac{REST}-konformes System
anzubinden. Der Webbrowser ist wohl der Weltweit bekannteste Client für
Webanwendungen. Er ist in der Lage, \ac{HTML}-Daten graphisch aufzubereiten.
Daten in anderen Dateiformaten werden als reiner Text ausgegeben.
\\
Das oben gezeigte Beispiel finden sie auch im Anhang \ref{lst:format_ii_gru} als
\ac{JSON}-Dokument und in Anhang \ref{lst:format_iii_gru} als \ac{XML}-Dokument.

\subsection{Eindeutige Identifikation}
\label{identification_gru}

Es hat sich als praktisch erwiesen, Ressourcen und deren Repräsentationen
eideutige Bezeichner zu geben. Im Web hat sich für die Vergabe solcher
Bezeichner ein einheitliches Konzept entwickelt. Die einheitlichen Bezeichner
werden als \ac{URI} bezeichnet. Mit Hilfe einer \ac{URI} kann eine
Repräsentation weltweit eindeutig identifiziert werden.
\\
Der Vorteil von einem weltweit anerkannten und genutzten Schema zur Vergabe von
\ac{URI} liegt darin, dass man kein eigenes erfinden muss, statt dessen ein
bereits sehr gut funktionierendes verwenden kann, dass sehr gut skaliert und
für fast jeden verständlich ist.
\begin{lstlisting}[caption={Beispiel URI, wie sie in einem Bestellsystem
auftreten könnten. \cite{STETIL-2009a} }\label{lst:bsp_uris_gru},captionpos=t]
http://example.com/customers/1234
http://example.com/orders/2007/10/776654
http://example.com/products
\end{lstlisting}
\ac{URI} werden verwendet um allen wesentlichen Repräsentationen, die es auch
Wert sind, in einer Anwendung zu eindeutig zu identifizieren, ganz gleich ob es
sich dabei um die Repräsentation einer einzelnen Ressource oder eine
Repräsentation von einer Menge von Ressourcen handelt. Beispiele für \ac{URI}
findet man im Listing \ref{lst:bsp_uris_gru}.
\\
Im Vergleich zu einer \ac{URI}, beschreibt eine \ac{URL} einen Ort an dem ein
Dokument bzw. Information abgelegt ist und zum Abruf bereit steht. Bei einer
\ac{URI} handelt es sich nicht mehr um einen Ort der damit beschrieben wird,
sondern es wird eine eindeutige Ressource bzw. eine klare definierte Menge von
Ressourcen identifiziert. Dabei wird die Ressource meistens von einer
komplexeren Software auf dem Server aufbereitet und als Repräsentation zum Abruf
bereitgestellt.

\subsection{Hypermedia}
\label{hypermedia_gru}

Hinter dem Prinzip von Hypermedia verbirgt sich das effiziente und sinnvolle
Verlinken von Ressourcen und deren Funktionen. An Hand des Beispiels
\ref{lst:hypermedia_gru} wird dies weiter erklärt. Die Gezeigte
Repräsentation zeigt einen reduzierten Datensatz eines Herstellers. Zeile 2 gibt
uns den Namen eines Herstellers zurück. Zeile 3 enthällt einen Link auf sich
selbst. Dieser kann sehr nützlich sein, wenn die Repräsentation maschinell
verarbeitet wird, oder der Link an andere Personen oder Funktionen weitergegeben
werden muss. Zeile 4 führt uns dann zu einer Liste mit allen geführten
Chemikalien des Herstellers.
\begin{lstlisting}[caption={Beispiel für ein JSON Dokument als Repräsentation der Ressource eines Herstellers.}\label{lst:hypermedia_gru},captionpos=t]
{ 
    "name": "BASF", 
    "url": "http://localhost:8000/producers/01/.json",
    "chemicals": "http://localhost:8000/producers/basf/chemicals/.json", 
}
\end{lstlisting}
Diese Art der Verlinkung ermöglicht es, fast intuitiv durch die Repräsentationen
von Ressourcen zu navigieren. Selbst ein Programm, welches diese Daten
auswertet, ist sehr leicht zu programmieren. Der Entwickler eines solchen Programms muss keine
Kenntnis über das serverseitige System haben, da alle für ihn wichtigen
\ac{URI} durch die Repräsentation selbst zur Verfügung gestellt werden. Er kann
alle Ressourcen und den Zusammenhang in dem diese zueinander stehen den
Repräsentationen entnehmen.
\\
Es ist ebenfalls denkbar, dass man auf diese Weise dem Nutzer, sei es eine
Anwendung oder ein Mensch, Links auf die Funktionen mitgibt, die als nächstes
ausführbar sind, z.B. löschen von Daten. Dies bedeutet, dass man eine
Zustandssteuerung des Systems erlaubt und direkt einen Status der Anwendung
übergibt und auch die daraus möglichen Folgezustände dem Anwender bekannt macht.
\\
Ziel ist es beim Einsatz von Hypermedia, die Repräsentationen so
miteinander zu verknüpfen, dass ein intuitives und leichtes navigieren
zwichen den Ressourcen ermöglicht wird. Folgt man diesem Prinzip, wird eine
Anwendung leicht und komfortabel zu bedienen. Entwickler von Software können
schneller und effizienter ihre Software programmieren, da sie nicht zwingend
das serverseitige System verstanden haben müssen.

\subsection{Standardmethoden}
\label{standardmethoden_gru}

Das Standard Protokoll im Internet ist das \ac{HTTP}. In der
\ac{HTTP}-Spezifikation sind unter anderem sechs Standardmethoden bekannt: GET,
POST, PUT, DELETE, HEAD und OPTIONS. Die Methoden GET, PUT und DELETE sind
laut Spezifikation immer idempotent. Das bedeutet, sollte man mit einer
\ac{URI} eine idempotente Standardmethode aufrufen, sind die Auswirkungen auf
das System unverändert. Wird beispielsweise zweimal ein GET auf eine gleiche
\ac{URI} aufgerufen, bekommt man, jeweils das gleiche Ergebnis zurück. Löscht
man ein bereits gelöschtes Objekt muss das System genau so reagieren wie beim ersten
mal: Es versucht wieder das Objekt zu löschen, findet das Objekt aber nicht und
macht nichts weiter.
Allerdings ist es diesmal nicht mehr da. Die Antwort des Systems muss wieder die selbe sein wie beim ersten mal,
und es darf nicht was anderes gemacht werden als beim ersten mal, z.B. nicht ein
anderes Objekt löschen.
\\
POST ist laut der Spezifikation eine nicht idempotente Methode. Das bedeutet es
gibt keine Garantien wie das System bei einem mehrmaligen POST auf eine URI
reagiert. Die Reaktion des Systems hängt von der Implementierung des
Systementwicklers ab.
\\
Die vier Standardmethoden GET, POST, PUT, DELETE sind auch für ein weiteres
Grundprinzip der Webentwicklung von großer Bedeutung. Beim Verwalten
und Bearbeiten von Ressourcen wird mittels des \ac{CRUD}-Prinzips eine
transparente Implementierung vorgeschrieben. Der Nutzer kann sich im allgemeinen
sicher sein, dass die idempotenten Methoden auch so implementiert wurden und ihm
die vier bzw. sechs Standardmethoden bereitgestellt werden, wenn er mit einer
\ac{REST}-konformen Anwendung arbeitet.
\\
Eine natürliche und intuitive Handhabung einer Webanwendung mit
\ac{REST}-konforme \ac{API} setzt voraus, dass alle auf der Website bereitgestellten
Funktionen auch in der \ac{REST}-konforme \ac{API} zur Verfügung gestellt werden.


\subsection{Statuslose Kommunikation}
\label{kommunikation_gru}

Bei der statuslosen Kommunikation wird der Status des Servers vom Client
gehalten oder als Ressourcenstatus übergeben. Ein Ressourcenstatus kann man sich
gut vorstellen, wenn man an ein Webkaufhaus denkt: Der Status des Kunden wird im
Warenkorb gespeichert und zu einer eigenen Ressource. Der Ressourcenstatus gibt
dem Kunden die Möglichkeit, Lesezeichen zu setzten oder Links darauf zu
verschicken.
\\
Der Verzicht auf einen expliziten Sitzungsstatus hat vor allem Vorteile, wenn es
darum geht eine Webanwendung skalierbar zu machen. Durch die losere Kopplung von
Client und Server können aufeinanderfolgende Anfragen von verschiedenen
Serverinstanzen verarbeitet werden, nicht von einer einzigen. Während ein Client
arbeitet, ist es für ihn nicht relevant, was der Server macht. Der Server kann
gewartet oder repariert werden, während der Client arbeitet. Mittels eines Links
werden erst nach erfolgreichem Ausführen der clientseitigen Aufgabe, die
Ergebnisse dem Server mitgeteilt. Hat der Server einen Client mit Informationen
versorgt und die Kommunikation ist abgeschlossen, geht der Server in seinen
Grundzustand zurück und kann andere Anfragen von anderen Clients bearbeiten.
\\
Eine Statuslose Kommunikation impliziert ebenfalls eine lose Kopplung. Es
gibt eine klar definierte Schnittstelle über die die Daten ausgestauscht
werden. Der Server ist völlig unabhängig vom Client und muss keine
clientspezifischen Informationen kennen. Er kann jederzeit mit allen
verarbeitbaren Daten umgehen, ohne dafür in einem extra Status befindlich zu
sein.
\\
Dieses \ac{REST}-Prinzip wird genutzt, um eine erfolgreiche und einfache
Kommunikation zwischen Server und Client sicherzustellen. Ein Ziel ist es ebenfalls,
dass die Verantwortlichkeiten für Daten und Operation getrennt sind. Für den
Datenaustausch sollten Standardformate, wie \ac{XML}, \ac{HTML}, \ac{JSON} usw.,
verwendet werden. Die Kommunikation sollte ebenfalls auf Standardprotokollen
basieren, z.B. \ac{HTTP}. Auf Grund dieser Standards ist der
Informationsaustausch zwischen Client und Server leicht zu realisieren.

\section{Volltextsuche mit elasticsearch}
\label{sec:Volltextsuche_gru}

\sona{elasticsearch}\footnote{Die offizielle Website von \sona{elasticsearch}
finden sie unter folgendem Link: \url{http://www.elasticsearchorg/}} ist ein auf
\sona{Apache Lucene}\footnote{Die offizielle Website von sona{Apache Lucene}
finden sie unter folgendem Link: \url{http://lucene.apache.org/}} basierender
Suchserver zur Volltextsuche.
Er wurde mit dem Anspruch entwickelt hoch skalierbar zu sein
und dennoch leicht in der Bedienung zu bleiben. Dabei sollte ein
Funktionsumfang, wie man ihn von \sona{Apache Lucene} kennt, zur Verfügung
gestellt werden, ohne dabei die Komplexität und die schwierige Bedienung von
\sona{Apache Lucene} auf \sona{elasticsearch} zu übertragen. Die
Entwickler achteten ebenfalls darauf, dass das System in Form von Modulen
aufgebaut wird, sodass es leicht um neue Module erweitert werden kann.
Ein im Softwarepaket enthaltenes \ac{API}-Modul erlaubt es den Suchserver zu
konfigurieren und zu bedienen.
\\
\sona{elasticsearch} speichert Daten schemalos und dokumentenorientiert.
Dabei werden die zu indizierenden Daten als {JSON}-Dokument an
\sona{elasticsearch} übergeben. 
\begin{figure}[ht]
  \centering
    \includegraphics[width=0.8\textwidth]{pic/aufbau_es.jpg}
      \caption{Aufbau von Nodes und Shardverteilung bei elasticsearch
      mit einem Node (oben) und zwei Nodes (unten) }
      \label{fig:aufbau_es_node_shard}
\end{figure}
\\
Wie \sona{elasticsearch} intern und pysikalisch aufgebaut ist, zeigt Graphik
\ref{fig:aufbau_es_node_shard}. Jeder Server auf dem \sona{elasticsearch}
läuft, stellt einen sogenannten Node dar. Mehrere Nodes bilden ein Cluster.
Jeder Node besteht aus \sona{Apache Lucene}-Instanzen, den Shards. Die Shards
dienen der Lastverteilung und der parallelen Verarbeitung, wenn mehrere Anfragen
vom Server verarbeitet werden. Bei mehreren Nodes verteilen sich die Shards auf
die Nodes möglichst gleichmäßig, jedoch werden Shards nicht aufgeteilt. Ein
logischer Index kann dabei auf mehrere Shards und mehrer Nodes verteilt abgelegt
werden. 
\begin{figure}[ht]
  \centering
    \includegraphics[width=0.8\textwidth]{pic/aufbau_es_rep.jpg}
      \caption{Aufbau der Nodes mit Shards und Replicas (grau) in einem System
      mit zwei Nodes. Die Replicas sind die Kopien der Shards eines anderen
      Knotens und werden im Falle eines Node-Ausfalls zu Shards.}
      \label{fig:aufbau_es_node_shard_rep}
\end{figure}
\\
Um eine höhere Ausfallsicherheit zu gewährleisten, enthällt ein Node in einem
Verbund von Nodes Replicas. Replicas sind die Kopien der Shards die ein Node
nicht enthällt. Graphik \ref{fig:aufbau_es_node_shard_rep} zeigt dies ebenfalls.
Fällt nun ein Knoten aus, werden die Replicas wieder zu Shards und das System
steht mit allen Daten und Dokumenten zur Verfügung.
\\
Der Aufbau des Systems durch Nodes, Shardes und Replicas dient dazu, höchste
Performanz, Effizienz und Ausfallsicherheit zu gewährleisten. Aufgrund der
Angesprochenen Mudularen Aufbauweise und der Unterstützung von Clustern, kann
\sona{elasticsearch} sowohl in verteilten Systemen als auch in nicht verteilten
Systemen effektiv genutzt werden. Entwickler können sehr leicht weitere Module
realisieren, die den Funktionsumfang von \sona{elasticsearch} erweitern oder
verbessern.
\begin{figure}[ht]
  \centering
    \includegraphics[width=0.99\textwidth]{pic/aufbau_es_dat.jpg}
      \caption{Der Index adresses verteilt sich auf die Knoten Node 1 und Node
      2. Eines der Dokumente (grau) des Indexes adresses liegt auf Node 1 in
      Shard 3 (Kaiser Platz) und auf Node 2 in Shard 5 (Königsplatz). Der Index
      names liegt auf Node 2 in den Shards 4 (Brigitte Schön) und 5 (Hans
      Schulz)}
      \label{fig:aufbau_es_node_shard_rep_dat}
\end{figure}
\\
Die Logischen Einteilung sind nicht an die physikalischen gebunden. Ein Index
ist nicht an nur ein Shard gebunden, sondern kann mehrere Shards auch auf
verschiedenen Nodes zum speichern von Dokumenten nutzen (Siehe Graphik
\ref{fig:aufbau_es_node_shard_rep_dat}). In einem Shard können auch Dokumente
mehrerer Indizes gespeichert werden.
\\
\begin{minipage}[h]
 {\textwidth}
 \centering %wenn tabelle mittig ausgerichtet sein soll
 \captionof{table}{Tabelle die den Wörtern (Tokens) Dokumente zuweist. Die
                   Tabelle enthält unter anderm die drei Sätze: "' Mr. Jackson
                   verstarb vor wenigen Jahren."'(Dokument 1) "`Michael Jackson
                   war ein berühmter Künstler."'(Dokument 2) "'Michael Müller
                   war ein Fan von Micheal Jackson."'(Dokument 3)}
  \begin{tabular}{|p{0.3\textwidth}|p{0.3\textwidth}|l|l|}
   \hline
   \textbf{Token} & \textbf{Dokument(e)}\\ \hline \hline 
     Mr & 1
     \\ 
     \hline 
     Jackson & 1+2+3
     \\ 
     \hline 
     verstarb & 1
     \\ 
     \hline 
     vor & 1
     \\ 
     \hline 
     wenigen & 1
     \\ 
     \hline 
     Jahren & 1
     \\ 
     \hline 
     Michael & 2+3
     \\ 
     \hline 
     war & 2+3
     \\ 
     \hline 
     ein & 2+3
     \\ 
     \hline 
     berühmter & 2
     \\ 
     \hline 
     Künstler & 2
     \\ 
     \hline 
     Müller & 3
     \\ 
     \hline 
     Fan & 3
     \\ 
     \hline 
     von & 3
     \\ 
     \hline 
  \end{tabular}
 \label{tab:token_dokument_mapping}
\end{minipage}
\\
\\
Die Logik die sich hinter der Volltextsuche mit \sona{elasticsearch} befindet
ist dabei sehr einfach. Es gibt ein Tabelle (Beispieltabelle
\ref{tab:token_dokument_mapping}). Diese enthällt in einer Spalte alle Wörter,
auch Token genannt, die in den indizierten Dokumenten vorkommen.
In einer anderen Spalte werden die Wörter mit allen Dokumenten, in denen das
Wort vorkommt, verknüpft. Sucht man jetzt ein Wort, oder Wortteil, wird nur
diese eine Tabelle durchsucht und man bekommt sehr schnell alle verknüpften
Dokumente zurückgeliefert. Sucht man nach "`Mr"' wird nur Dokument 1 als
Suchergebnis zurückgegeben. Sucht man nach "`Müller"' wird nur Dokument 3
zurückgegeben. Bei der Verknüpfung von Tokens werden bei der Suchabfrage diese
mit der logischen UND-Operation verknüpft. Die Bearbeitung erfolgt Serverseitig
quasi Bitweise. Das hat zur Folge, dass die Suchabfrage "`Mr. Müller"' keinen
Treffer findet.
Die Suchanfrage "`Michael Jackson"' liefert als Suchergebniss die Treffer in Dokument 2 und 3. Dokument 1 wird nicht
berücksichtigt.

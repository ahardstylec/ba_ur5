\chapter{Konzept}
\label{konzept_kon}

\section{Datenbank}
\label{datenbank_kon}

Für die Realisierung von \sona{euSDB} ist der Einsatz von zwei Datenbanksystemen
geplant. Eine der Datenbanken \ref{datenverwaltung_i_kon} ist für die gesammte
Datenverwaltung zuständig, die andere \ref{datenverwaltung_ii_kon} ist für die
schnelle abwicklung von Suchanfragen an das System zuständig. Dies bietet
mehrere Vorteile: Eine angemessenen Datenverwaltung, die ein übersichtliche
Datenstrucktur bietet und mit Hilfe von \ac{SQL}-Befehlen gepflegt und
administriert werden kann und eine Suchdatenbank, die den modernen Anforderungen
in Sachen Datenintegrität, Skalierbarkeit und Erweiterbarkeit im vollen Umfang
abdeckt.

\subsection{Datenbank zur allgemeinen Verwaltung der Datensätze eines
Sicherheitsdatenblatts}
\label{datenverwaltung_i_kon}

Für die Datenverwaltung und Speicherung kommt ein \sona{MySQL}-Datenbanksystem
zum Einsatz. \sona{MySQL} wird von \fina{Oracle}\footnote{Weitere
Informationen finden Sie auf der Website von Oracle:
\url{http://www.oracle.com/de/index.html}} weiterentwickelt und vermarktet.
Es gibt eine kostenlose Version und eine bezahlpflichtige
Enterprisevariante.
\\
Neben einer Nutzer- und Rechteverwaltung, werden in der Datenbank auch eine
Logtabelle geführt. Diese speichert jede Änderung am Datenbestand. Im folgenden
wird auf den Entwurf der Datenstruktur für das Ablegen von
Chemikalien bzw. Sicherheitsdatenblättern eingegangen.
\begin{figure}
  \centering
    \includegraphics[width=0.99\textwidth]{pic/db_entwurf.png}
      \caption{Die Graphik zeigt die Datenbankstruktur (Entwurf) von euSDB. Aus Gründen der Übersichtlichkeit zeigen die Tabellen nur wenige Felder. Im Anhang Din A3/2}
      \label{fig:db_entwurf}
\end{figure}
\\
Ein Sicherheitsdatenblatt wird durch die in Kapitel \ref{fachliche_domaene}
vorgestellten Kenzeichnungen (Siehe Tabelle \ref{tab:meinetabelle}) und Hinweise
beschrieben. Diese Kennzeichnungen sind größtenteils einheitlich und erfahren in
absehbarer Zeit keine Änderungen. All diese Daten (H-, P-, R- und S-Sätze,
GHS-, EU- und Hazard-Gefahrenkennungen) die einheitlich sind, und mehrfach
verwendet werden, liegen in jeweils einer eigenen Tabelle in der Datenbank
vor (Siehe Graphik \ref{fig:db_entwurf}).
\\
Wird eine Anweisung oder Gefahrenkennung mit einer Chemikalie verknüpft
geschieht dies über eine Matchingtabelle. Eine Solche Matchingtabelle enthällt
dann einen Fremdschlüssel (Foreign-Key) der Chemikalie und einen der mit der
Chemikalie verknüpften Anweisung bzw. Gefahreneinstufung. Bei der Verknüpfung
von Chemikalien und Anweisungen bzw. Gefahreneinstufung handelt es sich um
sogenannte Many-To-Many Beziehungen.
\\
Many-To-Many Beziehungen bedeuten, dass eine Anweisung mit
mehreren Chemikalien verknüpft sein kann und eine Chemikalie mit mehreren
Anweisungen verknüpft sein kann.
\\
Bei der herstellenden Firma verhällt es sich anders. Ein Sicherheitsdatenblatt
wird immer nur von einer Firma für die von ihr hergestellte Chemikalie
herausgegeben. Dies hat rechtliche Gründe wenn es um Fragen der Produkthaftung
geht. Daher gibt es zu jeder Chemikalie und jedem Sicherheitsdatenblatt nur
einen Hersteller. In diesem Fall ist es möglich direkt den Fremdschlüssel in der
Tabelle der Chemikalie abzulegen.
\\
Jeder Hersteller gibt leicht unterschiedlich Daten zu Chemikalien an. So
ist es theoretisch möglich, dass sich die Angaben zum Siedepunkt unterscheiden.
Aus diesem Grund werden daher gleiche Chemikalien unterschiedlicher Hersteller
als unterschiedliche Chemikalien betrachtet. Auch geben die Hersteller gerne
unterschiedliche Einsatz- und Verwendungszwecke an. Zur Veranschaulichung ein
Beispiel: Ein Farbenhersteller stellt selbst Aceton her. Es wird zur Verdünnung
von Farben eingesetzt. Verkauft der Farbenhersteller sein Aceton, wird er im
Sicherheitsdatenblatt angeben, dass es zur Verdünnung von Farben zu verwenden
ist. Ein Reinigungsmittelhersteller wird vermutlich in seinem
Sicherheitsdatenblatt angeben, dass es sich um ein Reinigungsmittel handelt und
dafür einzusetzen ist. Dies macht es ebenfalls sinnvoll gleiche Chemikalien
verschiedener Hersteller als unterschiedliche Chemikalien zu speichern.
\\
Eine Chemikalie selbst wird dabei durch ungefähr 60 Parameter
(Siedetemperatur, Dichte, molare Masse, \ldots) gekennzeichnet. Hinzukommen noch
die Angaben zur Einstufung der Gefahren und sich aus den Gefahren ergebenden
Sicherheits- und Arbeitsanweisungen. Jeder dieser Parameter stellt ein eigenes
Feld in der Tabelle dar.
\\
Hinzu kommt noch die Möglichkeit einer Versionierung. Häufig verändern sich im
Laufe der Zeit die Angaben auf einem Sicherheitsdatenblatt. Jeder Veränderung
geht mit der Herausgabe einer neuen Version eines Sicherheitsdatenblattes
einher. Um die Informationen, die in einem Sicherheitsdatenblatt aufgeführt sind
lange nachhalten zu können, existiert nicht nur für die Chemikalie selbst eine
Versionierung, sondern auch für alle mit ihr verknüpften Komponenten. Sollte
sich nun eine Einstufung oder ein Satz ändern, kann man trotzdem nachhalten, wie
ein früheres Sicherheitsdatenblatt aufgebaut war.

\subsection{Datenbank zur Realisierung einer effektiven Volltextsuche}
\label{datenverwaltung_ii_kon}

Das System, das zur Suche eingesetzt wird heißt \sona{elasticsearch} Das
System ist zunächst auf einen Node mit fünf Shards begrenzt. Es gibt einen Index
namens ChemicalIndex. Für jede Chemikalie wird in dem Index ein Dokument
abgelegt. Dieses enthält die möglichen Identifizierer. Diese sollen
nach internationalen Vorgaben möglichst eindeutige Bezeichner (z.B.
Name der Chemikalie, internationale Formeln, internationale Identifizierungsnummern) sein. Nur nach
solchen ist es sinnvoll zu suchen.
\begin{figure}[h]
  \centering
    \includegraphics[width=0.99\textwidth]{pic/aufbau_es_dat_chem.jpg}
      \caption{Entwurf des Aufbaus von elasticsearch Es gibt einen Knoten mit
      fünf Shards. Der Index ChemicalIndex verteilt sich auf diesen Knoten und
      die Shards. Beispielhaft sind hier drei Dokumente auf Shard 2 und 4
      verteilt worden}
      \label{fig:aufbau_es_dat_chem}
\end{figure}
\\
Wird eine neue Chemikalie oder eine bestehende Chemikalie erstellt oder
bearbeitet, sollen sich die Änderungen automatisch auch auf die in
\sona{elaticsearch.} abgelegten Daten übertragen werden. Auf diese Weise hällt
sich der administrative Verwaltungsaufwand in Grenzen.
\\
Später ist es möglich den Suchindex noch um einige einträge zu erweitern oder
neue Suchindexe zu erstellen. Auch kann das gesammte Suchsystem zu einem
verteilten System umgebaut werden.

\section{Aufbau des Djangoprojekts}
\label{aufbau_djangoprojekt_kon}

Die Grundstruktur eines Djangoprojektes können sie in den Grundlagen
\ref{sec:django_gru} nachlesen. Das System setzt sich aus den folgenden
Grundfunktionen zusammen: (1) Bereitstellung von Chemikalien (deren
Beschreibung) mit ihren \ac{SDB}, (2) die Suche nach Chemikalien und \ac{SDB} und
(3) eine Benutzer und Rechteverwaltung (Siehe Graphik \ref{fig:django_module}.
\begin{figure}[h]
  \centering
    \includegraphics[width=0.99\textwidth]{pic/django_module.jpg}
      \caption{Das Projekt euSDB besteht aus den drei Kernmodulen chemicals,
      search und userauth.}
      \label{fig:django_module}
\end{figure}
\\
(1) Soll dabei nicht nur dem Kunden die chemischen Daten und \ac{SDB} zur
Verfügung stellen, sondern managt die Versionierung und langfristige Speicherung
von \ac{SDB}. Ebenfalls enthällt diese Funktion die \ac{REST}-konforme \ac{API} die nicht
nur den menschlichen manuellen, sonder auch den automatisierten Zugriff durch
Programme und Maschinen erlaubt. Die Funktion ist in der Lage \ac{SDB} in den
Formaten \ac{JSON}, \ac{XML}, \ac{HTML}, \ac{PDF} auszugeben.
\\
(2) Mit Hilfe der Suche soll es menschlichen Benutzern des Systems ermöglicht
werden, geziehlt nach einzelnen \ac{SDB} zu suchen. Nicht immer führen die
angegebenen Werte, nach denen gesucht wird, zu eindeutigen Ergebnissen. Aus
diesem Grund wird immer eine Liste mit den möglichen \ac{SDB} zurückgegeben.
Diese kann kein Element, ein Element oder mehrere Elemente enthalten.
\\
(3) Da das System über einen Zugriffsschutz verfügt müssen die Benutzer des
Systems und deren Rechte verwaltet werden. Dies Übernimmt dieser
Programmbereich. Zum einen erlaubt er es dem Administrator an die Benutzer
Rechte zu vergeben, Benutzer in Gruppen zusammenzufassen und diesen Gruppen
Rechte zuzuweisen und es erlaubt den Kunden auf \ac{SDB} zuzugreifen. 

\section{Aufbau der REST-Schnittstelle}
\label{aufbau_rest_schnittstelle_kon}

Die \ac{REST}-konforme \ac{API} soll vier Ausgabeformate haben: \ac{JSON}, \ac{XML},
\ac{HTML} und \ac{PDF} (Siehe Graphik \ref{fig:ausgabeformate}). Dabei soll das
Ausgabeformant sowohl im \ac{HTTP}-Header als auch als Parameter an die \ac{URI}
angehängt werden. 
\begin{lstlisting}[caption={Beispiele für das Absenden von Anfragen (Requests)
an den Server. Dabei liefern die Anfragen aus Zeile 1 und 3 das gleiche
Ergebnis. Zeile 2 und 4 ebenfalls.}\label{lst:bsp_abfrage_kon}, captionpos=t]
https://www.euSDB.de/chemicals/?format=json
https://www.euSDB.de/chemicals/?format=xml
curl -H "Accept: application/json" https://www.euSDB.de/chemicals/
curl -H "Accept: application/xml" https://www.euSDB.de/chemicals/
\end{lstlisting}
\\
Auf diese Weise soll nach der Eingabe von Zeile 1 des Listing
\ref{lst:bsp_abfrage_kon} in einem Browser ein \ac{JSON}-Dokument angezeigt
bekommen. Nach Eingabe von Zeile 2 des Listing \ref{lst:bsp_abfrage_kon} ein
\ac{XML}-Dokument. Ebenfalls soll man das Ausgabeformat über den "`Accept"'-Wert
des \ac{HTTP}-Headers steuern können. Ziel ist es das Zeile 1 und 3 des Listing
\ref{lst:bsp_abfrage_kon} das gleiche Ergebnis ergeben, genau wie die Zeilen 2 und
4.
\\
Zunächst ist es geplant nur ein Abrufen von \ac{SDB} mittels der
\ac{HTTP}-GET-Standardmethode bereitzustellen. Dennoch ist bei dem Design der
\ac{REST}-konforme \ac{API} darauf zu achten, dass sich diese leicht erweitern lässt. Die
Antworten des Servers sind in \ac{UTF}-8 codiert.
\begin{figure}[h]
  \centering
    \includegraphics[width=0.75\textwidth]{pic/baum_rest.jpg}
      \caption{Der Graph zeigt wie mittels der REST-konforme API durch das System euSDB
      navigiert werden soll. Dabei spielt es keine Rolle, ob man durch die
      Suche direkt bei einer Chemikalie startet, oder von der API-Wurzel (root)
      ausgeht. (Darstellung nicht UML-konform)}
      \label{fig:baum_rest}
\end{figure}
\\
Als Einstiegspunkt soll es zwei Möglichkeiten geben. Zum einen einen
vordefinierten Einstiegspunkt und zum anderen soll es auch mit Hilfe jedes
Suchergebnisses möglich sein, einen Einstieg und somit einen erfolgreichen
Zugriff auf die Daten zu erhalten. Mittels Verlinkungen der einzelnen Ressourcen
untereinander soll es dann möglich sein, auf alle relevanten Daten, die im
System zu einem \ac{SDB} gespeichert sind, zugreifen zu können. Abgesehen von
der Wurzel hat jedes Objekt ein Vorgänger-Objekt. Dieses ist ebenfalls verlinkt.
Mit diesen Links kann man durch die gesammte Datenstruktur, die zur Verfügung
steht, navigieren. Graphik \ref{fig:baum_rest} veranschaulicht an Hand eines
Baum-Modells, wie die Verlinkungen und das Navigieren funktionieren. 
\begin{lstlisting}[caption={Bei der Ausgabe von Listen
ist es möglich diese auf mehrere Seiten zu verteilen.
Die Anzahl der Elemente pro Seite und die aktuell
angezeigte Seite lässt sich mittels Parameterübergabe
steuern. Man landet hier auf Seite 2 mit maximal 50
Einträgen.}\label{lst:bsp_paging}, captionpos=t]
https://www.euSDB.de/chemicals/?page=2&per_page=50
\end{lstlisting}
\\
Bei der Ausgabe von Listen, werden bei mehr als 20 Objekten Seiten ausgegeben
(Paging). Dann erhällt man sofern sie verhanden sind auch noch einen Link auf
die vorangegangen und die nachfolgende Seite. Mittels Parameterübergabe lässt
sich steuern, wie viele Objekte pro Seite verlinkt werden sollen, und auch das
direkte Springen auf eine Seite ist möglich. Listing \ref{lst:bsp_paging}
veranschaulicht dies anhand eines Beispiels.
\\
Der Generelle Aufbau der \ac{URI} ist hirachisch. Dies lässt sich anhand des
Baummodels \ref{fig:baum_rest} veranschaulichen. Dies dient zunächst dazu, die
Treffermöglichkeiten immer weiter einzuschrenken, bis man bei der gewünschten
Chemikalie angekommen ist. Von dort aus sind dann alle dazugehörigen Anweisung,
Hinweise und Symbole schnell und direkt erreichbar.


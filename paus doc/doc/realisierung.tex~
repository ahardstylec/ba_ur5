\chapter{Realisierung}
\label{chap:umsetzung}

\section{Datenbank}
\label{sec:Datenbank_rel}

Das \sona{Django}-Framework nimmt dem Entwickler einige Aufgaben ab. So kann es
unter anderem auch eine Datenbank gemäß den Einstellungen und Klassen erzeugen, die
bei der Umsetzung verwendet und eingesetzt werden. Die Einstellungen, die die
Kommunikation mit der Datenbank ermöglichen, werden in der "`settings.py"'
(Siehe Anhang \ref{settings}) im Konfigurationsverzeichnis vorgenommen. Die
Zentrale Einheit zur Verwaltung und Nutzung einer Datenbank ist in jeder \sona{Django}-\ac{APP} die "`models.py"';
in Kapitel \ref{sec:django_gru} wurde bereits die Ordnerhirachie und der Aufbau
von \sona{Django}-Projekten vorgestellt.
\begin{lstlisting}[caption={Einstellungen in der Datei "`settings.py"' zur
Ansteuerung eines lokal installierten MySQL-Datenbanksystems
}\label{lst:anbindung_db_rea},captionpos=t]
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'euSDB',
        'USER': 'eusdb',
        'PASSWORD': 'XXX',
        'HOST': '',
        'PORT': '',
    }
}
\end{lstlisting}
\\
Die Einträge in der "`settings.py"', die hier auch noch mal in Listing
\ref{lst:anbindung_db_rea} aufgeführt sind, erlauben den Zugriff auf ein lakales
\sona{MySQL}-Datenbanksystem. In Zeile 3 wird der Typ der verwendeten Datenbank,
und die Komponente ausgewählt, die die Verbindung zur Datenbank aufbauen wird.
In diesem Fall ist eine Standardklasse des \sona{Django}-Framework angegeben.
In Zeile 4 der Name der Datenbank, danach folgen der Benutzername und dessen
Passwort in Klartext (Hier in Form von "`XXX"' dargestellt).
\begin{lstlisting}[caption={Ausschnitt aus der Datei "`models.py"' der
 chemicals-APP, die in der Datenbank durch die Tabelle "`chemicals\_chemicals"'
 und all ihre Matchingtabellen dargestellt wird.
}\label{lst:chemical_model},captionpos=t]
class Chemical(models.Model):
    """Chemical model."""
    id = models.AutoField(u'id', primary_key=True, editable=False)
    name = models.CharField(u'Name', max_length=255, default='')
    company = models.ForeignKey(CompanyData,
        verbose_name=u'Hersteller-Firma', related_name='chemicals')
    hazard = models.ManyToManyField(Hazard, verbose_name=u'Hazard Symbol')
    ghs = models.ManyToManyField(Ghs, verbose_name=u'GHS Gefahren Kennung')
    eu = models.ManyToManyField(Eu, verbose_name=u'EU Gefahren Kennung')
    p_phrase = models.ManyToManyField(P_phrase, verbose_name=u'P-Satz')
    s_phrase = models.ManyToManyField(S_phrase, verbose_name=u'S-Satz')
    r_phrase = models.ManyToManyField(R_phrase, verbose_name=u'R-Satz')
    h_phrase = models.ManyToManyField(H_phrase, verbose_name=u'H-Satz')
    slug_chemical = models.SlugField(unique=True)
    previous_data = models.OneToOneField('self', blank=True,
        null=True, related_name='Vorgaenger_von')
    replacement_data = models.OneToOneField('self', blank=True,
        null=True, related_name='Nachfolger_von', editable=False)
    last_update = models.DateTimeField(editable=False)
\end{lstlisting}
\\
In der Datei "`models.py"' einer jeden \ac{APP} werden die einzelnen Tabellen in
Form von Klassen abgelegt. Die Variablen dieser Klassen findet man in der
Datenbank als Felder der entsprechenden Tabellen wieder. Das Listing
\ref{lst:chemical_model} zeigt die Klasse die die Tabelle "`chemicals\_chemicals"' mit all ihren
Matchingtabellen auf andere Tabellen darstellt. Das erste chemicals steht dabei
für die \acc{APP}, der die Tabelle zuzuordnen ist, die Zweite für die
eigentliche Komponenten. Es existieren noch die Tabellen "`chemicals\_p\_phrase"',
"`chemicals\_ghs"', \ldots. Die Matchingtabellen werden nach der \ac{APP}, der
Hauptkomponente und der zu verknüpfenden Komponente benannt. Es entstehen
Tabellennamen wie "`chemicals\_chemicals\_p\_phrase"',
"`chemicals\_chemicals\_ghs"', \ldots.
\\
Man erkennt an Listing \ref{lst:chemical_model} sehr gut, wie die Komponenten
mit Chemikalien verknüpft werden. Der Hersteller wird durch das Aufnehmen
des Fremdschlüssels in die Tabelle "`chemicals\_chemicals"' vollzogen (Siehe
Zeilen 5 und 6). Andere Komponenten werden in Form von
"`ManyToMany"'-Beziehungen verknüpft (Siehe Zeilen 7 bis 13).
\\
Dabei existieren im \sona{Django}-Framework schon Basisklassen, für die
wichtigsten Datentypen und für das Verknüpfen von Komponenten. Diese sind in der
Klasse "`Models"' gespeichert und können verwendet werden. Es ist auch möglich
eigene Feldtypen zu definieren die das bestehende Angebot erweitern.
\begin{lstlisting}[caption={Befehlfolge zur Eingabe in ein Linux-Terminal
direkt auf dem Server zur Erstellung einer Datenbank in einem Datenbanksystem
mit allen Tabellen der APP chemicals.
}\label{lst:erstellung_db_rea},captionpos=t] DATABASES = {
python manage.py validate
python manage.py sqlall chemicals
python manage.py syncdb
\end{lstlisting}
\\
Hat man die "`Models"' definiert und eine Verbindung zu einem Datenbanksystem
erstellt kann das \sona{Django}-Framework über die Eingabe der Befehle aus
Listing \ref{lst:erstellung_db_rea} selbstständig eine Datenbank mit den
Tabellen erzeugen. Zeile 1 überprüft zunächst ob Syntaxfehler vorliegen. Zeile 2
erstellt die \ac{SQL}-Befehle und speichert sie zwischen. Zeile 3 sendet die
\ac{SQL}-Befehle an das Datenbanksystem ab. Und sorgt somit für das direkte
Erstellen der Datenbank.
\\
Die Datei mit allen Model-Klassen ist im Anhang \ref{model_py} angefügt.
Betrachtet man diese Datei stellt man Fest, dass diese eine Subklasse enthällt.
In dieser wird bestimmt wie der Name des bzw der Objekte ist. Ebenfalls gibt es
Funktionen, die die Handhabung der Objekte erleichtern soll. Die in den Zeilen
19 und 20 von Listing \ref{model_py} definierte Methode "`\_\_unicode\_\_"' wird
verwendet, um eine Standardtextausgabe eines Objektes zu erzeugen. Sie kann
sowohl im Terminal, als auch auf Webseiten verwendet werden.
\\
Da es manchmal nicht reicht Objekte einfach in einer Datenbank abzulegen wird in
der Methode "`save"' (z.B. Listing \ref{model_py}: Zeile 22 bis 29) die
Speichermethode überladen. Es wird ein Erstelldatum gesetzt wenn das Objekt vom
Datenbanksystem noch keine "`ID"' zugeordnet bekommen hat. Ist eine "`ID"' schon
verhanden und wird nur eine aktualisierung bzw. veränderung an einem
Datensatz durchgeführt, ist es nicht mehr notwendig das Erstellungsdatum zu
verändern (z.B. Listing \ref{model_py}: Zeile 23 und 24). 

\section{REST-Schnittstelle}
\label{sec:REST-Schnittstelle_rel}

\subsection{Aufbau der URI}
\label{sec:aufbau_uri}

Der Aufbau der \ac{URI} wird hirachisch durchgeführt. Das bedeutet, dass nicht
alle Funktionen direkt über die Wurzel der \ac{API} aufgerufen werden, sondern
sich aus gewissen Zusammenhängen zwischen den Ressourcen ergeben.
\begin{lstlisting}[caption={
    Ein Ausschnitt aus der Datei "`urls.py"' der APP "`chemicals"'. Anhand
    dieser lässt sich sehr leicht der Aufbau der hierarchischen URI
    nachvollziehen.}
\label{lst:urls},captionpos=t] 
urlpatterns = patterns('chemicals.views',
  url(r'^$', 'api_root', name = 'api_root'),
  url(r'^producers/$', views.ProducerList.as_view(), name = 'producer_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/$', views.ProducerDetail.as_view(), 
      name = 'companydata-detail'),    
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/$', 
      views.ChemicalList.as_view(), name = 'chemical_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)/$', 
      views.ChemicalDetail.as_view(), name = 'chemical-detail'),   
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /hazards/$',
      views.HazardList.as_view(), name = 'hazard_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /hazards/(?P<id_haz>[-\w]+)/$', views.HazardDetail.as_view(), 
      name = 'hazard-detail'), 
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)/ghs/$', 
      views.GhsList.as_view(), name = 'ghs_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /ghs/(?P<id_ghs>[-\w]+)/$', views.GhsDetail.as_view(), 
      name = 'ghs-detail'), 
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)/eus/$', 
      views.EuList.as_view(), name = 'eu_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /eus/(?P<id_eu>[-\w]+)/$', views.EuDetail.as_view(), 
      name = 'eu-detail'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /p_phrases/$', 
      views.P_phraseList.as_view(), name = 'p_phrase_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /p_phrases/(?P<id_p_ph>[-\w]+)/$', views.P_phraseDetail.as_view(), 
      name = 'p_phrase-detail'), 
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /s_phrases/$', 
      views.S_phraseList.as_view(), name = 's_phrase_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /s_phrases/(?P<id_s_ph>[-\w]+)/$', views.S_phraseDetail.as_view(), 
      name = 's_phrase-detail'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /r_phrases/$', 
      views.R_phraseList.as_view(), name = 'r_phrase_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /r_phrases/(?P<id_r_ph>[-\w]+)/$', views.R_phraseDetail.as_view(), 
      name = 'r_phrase-detail'), 
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /h_phrases/$', views.H_phraseList.as_view(), name = 'h_phrase_list'),
  url(r'^producers/(?P<id_comp>[-\w]+)/chemicals/(?P<id_chem>[-\w]+)
      /h_phrases/(?P<id_h_ph>[-\w]+)/$', views.H_phraseDetail.as_view(), 
      name = 'h_phrase-detail'), )
\end{lstlisting}
\\
Man durchsucht zunächst alle Hersteller. Hat man den entsprechenden Hersteller
gefunden, kann man sich alle Chemikalien dieses Herstellers anzeigen lassen,
usw. Dieses Vorgehen wird denen im Ausschnitt \ref{lst:urls} gezeigten
\ac{URI}-Mustern sichergestellt.
\\
Der Aufbau eines Befehls zur Verarbeitung einer Anfrage ist dabei fast immer
identisch. Zeile 8 bis 10 des Listings \ref{lst:urls} ist wie folgt aufgebaut.
"`url(\ldots)"' erzeugt ein neues Muster für eine \ac{URI}. Dann folgt ein
Regulärer-Ausdruck, der den genauen Aufgbau der \ac{URI} definiert. Die
Variablen sind daran zu erkennen dass sie von "`<\ldots>"' eingefasst
sind. Im Beispiel sind folgende Variablen angegeben:
"`<id\_comp>"' und "`<id\_chem>"'. Dies sind die ID's der entsprechenden
Ressourcen.
\\
Nach dem folgenden Komma erfolgt der Aufruf der "`view"', die die Anfragen an
die \ac{URI} verarbeitet. Views können objektorientiert oder funktional
programmiert werden. Die im Listing \ref{lst:urls} in Zeile 2 gezeigte \ac{URI}
zur zur \ac{API}-Wurzel ist mittels eines Funktionsaufruf aufgebaut. Die anderen
gezeigten \ac{URI} sind mit objektorientierten Aufrufen geregelt.
\\
Wichtig ist, dass zum Aufruf der Detail-Ansicht einer Ressource eine eindeutige
\ac{URI} aufgerufen wird. Eine Sicherstellung dieses Zustandes wird schon durch
die models-Klassen bzw. durch die Datenbank sichergestellt. Hier heißt es in den
models-Klassen in der Variablen-Deklaration für die "`slug"'-Felder, dass
diese "`unique"' (einzigartig) zu sein haben.

\subsection{Serialisierung von Ressourcen}
\label{sec:serialisierung}

\begin{lstlisting}[caption={Serialisierer-Klassen zur Serialisierung von
Chemikalien. Sowohl für die Detailansicht als auch für die Listenansicht.
(Ressource: Producer)
}\label{lst:serialisierer},captionpos=t] 
class CompanyData_List_Serializer(serializers.HyperlinkedModelSerializer):
    url = serializers.HyperlinkedIdentityField(lookup_field='slug_company',
        view_name='companydata-detail',)
    class Meta:
        model = CompanyData
        fields = ('name', 'url')
    def restore_object(self, attrs, instance=None):
        return CompanyData(**attrs)

class PaginatedCompanyDataListSerializer(PaginationSerializer):
    class Meta:
        object_serializer_class = CompanyData_List_Serializer

class CompanyData_Detail_Serializer(serializers.HyperlinkedModelSerializer):
    url = serializers.HyperlinkedIdentityField(lookup_field='slug_company',
        view_name='companydata-detail',)
    chemicals = serializers.SerializerMethodField('get_producer_chemicals')
    def get_producer_chemicals(self, obj):
        return reverse('chemical_list', args=[obj.slug_company, 
            self.context['format']], request=self.context['request'])
    class Meta:
        model = CompanyData
        fields = ('url', 'name', 'chemicals', 'previous_data', 
            'replacement_data')
    def restore_object(self, attrs, instance=None):
        return CompanyData(**attrs)
\end{lstlisting}
\\
Zur Verarbeitung von Ressourcen durch Views werden diese serialisiert. Zu diesem
Zweck wird die chemicals-\ac{APP} um eine Datei namens "`serializer.py"'
erweitert. Diese Datei enthällt alle Serialisierer-Klassen, die zur Verarbeitung
von Requests an das System notwendig sind. Listing \ref{lst:serialisierer} zeigt
die Serialisierer zur Serialisierung der Chemikalien sowohl als Liste als auch
als für die Detail-Ansicht.
\\
An Hand des Beispiels Listing \ref{lst:serialisierer} sieht man, dass nur die
wichtigsten Informationen einer Ressource zur Darstellung für die
Listenübersicht (Zeile 1 bis 8) übergeben werden, Name und \ac{URI} (Zeile 6).
\\
Erst in der Detailansicht (Zeile 14 bis 26) werden mehr Informationen zur
Verfügung gestellt. Man kann steuern, welche Informationen jetzt ausgegeben
werden (Zeile 23 und 24).

\subsection{Funktionsweise der Views}
\label{sec:views}

\begin{lstlisting}[caption={View-Klassen zur Bearbeitung von Requests an das
System und zum Erstellen der entsprechenden Antworten. (Ressource: Producer)
}\label{lst:view},captionpos=t] 
class ProducerList(APIView):
    renderer_classes = (TemplateHTMLRenderer, UnicodeJSONRenderer, XMLRenderer)  
    authentication_classes = (SessionAuthentication, BasicAuthentication)
    permission_classes = (IsAuthenticated,)
    def get(self, request, format=None):
        companys = CompanyData.objects.all().filter(replacement_data=None)
        paginate_by = 3
        paginator = Paginator(companys, paginate_by)
        page = request.QUERY_PARAMS.get('page')
        try:
            obj = paginator.page(page)
        except PageNotAnInteger:
            obj = paginator.page(1)
        except EmptyPage:
            obj = paginator.page(paginator.num_pages)
        serializer = PaginatedCompanyDataListSerializer(obj, 
            context ={'request': request, 'format': format})
        if (format == 'html') | (format == None):
            return Response({'object_list': obj}, 
                template_name='chemicals/producer_list.html')
        return Response(serializer.data)

class ProducerDetail(APIView):
    renderer_classes = (TemplateHTMLRenderer, UnicodeJSONRenderer, XMLRenderer)  
    authentication_classes = (SessionAuthentication, BasicAuthentication)
    permission_classes = (IsAuthenticated,)
    def get_object(self, slug_company):
        try :
            return CompanyData.objects.get(slug_company=slug_company)
        except CompanyData.DoesNotExist:
            raise Http404
    def get(self, request, slug_company, format=None):
        companys = self.get_object(slug_company)
        serializer = CompanyData_Detail_Serializer(companys, 
            context ={'request': request, 'format': format})
        if (format == 'html') | (format == None):
            return Response(serializer.data, 
                template_name='chemicals/producer_detail.html')
        return Response(serializer.data)
\end{lstlisting}
\\
Die Views erzeugen die Repräsentationen, die der Kunde von \sona{euSDB} auf
seinem Client oder Webbrowser zur Verfügung gestellt bekommt. Dabei wird unterschieden
ob es eine Standardausgabe (\ac{JSON} oder \ac{XML}) ist oder eine graphische
aufbereitete Ausgabe (\ac{HTML}) ist.
\\
Im ersten Schritt werden der View Renderer-Klassen zur Verfügung gestellt. Dabei
handelt es sich um Standardklassen und Funktionen, die in der Lage sind Daten in
das entsprechende Format zu überführen. Darauf folgen das Authentifizierungs-
und Rechtevergabe-Klassen. Das ist notwendig, um zu verhindern, dass Unbefugte
Zugriff aus das System bekommen.
\\
Zum Implementieren der Standardmethoden des \ac{HTTP} sind für Entwickler
mehrere Methodennamen ("`get"', "`post"', "`head"', \ldots) reserviert. In dem
Beispiel Listing \ref{lst:view} sind die "`get"'-Methoden (Zeile 5 bis 21 und 32
bis 39) realisiert.
Neben den für die Standardmethoden reservierten Funktionen können auch weitere
Funktionen in die Klassen implementiert werden. Zeile 27 bis 31 des Listings
\ref{lst:view} rufen die Daten aus der Datenbank ab, ist das nicht erfolgreich
erzeugen sie eine Standard-Fehelermeldung.
\\
Die Standardausgaben müssen nicht graphisch aufbereitet werden. Sie haben den
Zweck möglichst kompakt die Daten dem Kunden zur maschinellen Weiterverarbeitung
zur Verfügung zu stellen. Dabei ist ein Seitenlayout nicht von Bedeutung und
würde eine schenlle Verarbeitung nur stören. Der Datensatz wird sowohl in der
Listenübersicht (Listing \ref{lst:view} Zeile 1 bis 21) als auch in der
Detailansicht (Listing \ref{lst:view} Zeile 23 bis 39) jeweils serialisiert.
Dabei werden die im vorigen Kapitel \ref{sec:serialisierung} vorgestellten
Serializierer verwendet (Zeilen 16 und 17 bzw. 34 und 35).
\\
Nachdem die Daten serialisiert wurden, werden sie aufbereitet und dem Kunden als
Antwort zugeschickt. Dabei werden die Daten in den Formaten \ac{JSON} und
\ac{XML} direkt an den Kunden versandt, sollen die Daten jedoch als
\ac{HTML}-Dokument ausgegeben werden, generiert die View unter zur Hilfenahme
eines Templates das Antwort-Dokument (z.B. Zeile 18 bis 20).

\subsection{Hypermedia zwischen den Ressourcen}
\label{sec:hypermedia}

Die Grundlagen über Hypermedia findet man im Kapitel \ref{hypermedia_gru}. Hier
wird beschrieben, wie die Verlinkungen zwischen den Ressourcen realisiert
wurden.
\\
Die Models wurden, wie im Abschnitt \ref{sec:serialisierung} beschrieben,
serialisiert, sodass sie von den Modells verarbeitet und verwendet werden
konnten. Als Beispiel dient wieder Listing \ref{lst:serialisierer}. Hier wird in
den Zeilen 2 und 3 eine Variable namens "`url"' definiert. Diese dient dazu in
der Listenansicht zu jeder Instanz einer Ressource einen Link zu erzeugen.
\begin{lstlisting}[caption={
Definition der Variablen "`url"' aus dem Serialisierer einer Liste.} 
\label{lst:url_def},captionpos=t] 
    serializers.HyperlinkedIdentityField(lookup_field='slug_company',
        view_name='companydata-detail',)
\end{lstlisting}
\\
Der Befehl aus Listing \ref{lst:url_def} funktioniert wie folgt:
Das "`HyperlinkedIdentityField"' erzeugt einen Link auf eine Ressource. Dabei
wird als Identifizierungsfeld (lookup\_field) ein Schlagwortfeld (slug\_\ldots) der zu
verlinkenden Ress^^^^^ource verwendet. Am Schluss wird dann die aufzurufenden
View angegeben.
\begin{lstlisting}[caption={
    Definition der Variablen "`url"' und "`chemicals"' aus dem Serialisierer der
    Detailansicht eines Herstellers.} 
\label{lst:hypermedia},captionpos=t] 
    url = serializers.HyperlinkedIdentityField(lookup_field='slug_company',
        view_name='companydata-detail',)
    chemicals = serializers.SerializerMethodField('get_producer_chemicals')

    def get_producer_chemicals(self, obj):
        return reverse('chemical_list', args=[obj.slug_company, 
            self.context['format']], request=self.context['request'])
\end{lstlisting}
\\
Bei der Vergabe von Links in der Detaiansicht gibt es zwei Links. Einer verweist
auf sich selber ("`url"') und einer, im Beispiel auf die Chemikalien
("`chemicals"'). Die Variablen werden auch in diesem Fall im Serializierer
initialisiert (Zeile 1 bis 3, Listing \ref{lst:hypermedia}). Es ist notwendig
den Link auf eine andere Ressource selbst zu bauen, da das System eigentlich
keine hirachischen \ac{URI} unterstützt. Dies übernimmt die Funktion aus den
Zeilen 5 und 7. Hier wird mittels des "`reverse"' Befehls eine Link gebaut.
Diesem werden das vom Kunden angeforderte Format, im Fall des Beispiels die
Firma, die aufzurufende View ("`chemical\_list"') usw übergeben. Am Ende
entsteht eine absolute \ac{URI}.
\\
Auf diese Weise kann der Kunde sich über die Verlinkungen und die bereits
bekannten Links durch das System bewegen, ohne dessen genauen Aufbau zu kennen.

\subsection{Paging in den Listenansichten}
\label{sec:paging}

Das Paging, also das einteilen von Listen in mehrere Pakete (Seiten), wird
sowohl von der View als auch dem Serialisierer gesteuert. Dabei teilt der
Serializierer den Datensatz auf (Listing \ref{lst:paging}).
\begin{lstlisting}[caption={
    Einteilen der Seiten durch den Serialisierer. (Ressource: Producer) }
\label{lst:paging},captionpos=t]
class PaginatedCompanyDataListSerializer(PaginationSerializer):
    class Meta:
        object_serializer_class = CompanyData_List_Serializer
\end{lstlisting}
\\
Dabei wird die von dem "`CompanyData\_List\_Serializer"' gelieferten Daten durch
den "`PaginationSerializer"', einer Standardmethode, in Seiten eingeteilt.
\\
In der View kann man angeben, wie viele Einträge pro Seite zu führen sind, und
welche Seite gerade zurückgeliefert werden soll.
\begin{lstlisting}[caption={
Steuerung und Validierung des Paging in der View. (Ressource: Producer) }
\label{lst:paging_view},captionpos=t]
        paginate_by = 25
        paginator = Paginator(companys, paginate_by)
        page = request.QUERY_PARAMS.get('page')
        try:
            obj = paginator.page(page)
        except PageNotAnInteger:
            obj = paginator.page(1)
        except EmptyPage:
            obj = paginator.page(paginator.num_pages)
\end{lstlisting}
\\
In Listing \ref{lst:paging_view} wird in Zeile 1 eine Standardwert für die
Anzahl an Einträgen pro Seite angegeben. Danach werden die Daten von der
Datenbank angefordert und unter "`page"' gespeichert. In den Zeilen 4 bis 9 wird
dann überprüft, ob die Anfrage korrekt ist und beantwortet werden kann; z.B. ob
für die Seitenzahl ein Integer Wert angegeben wurde, oder man eine leere Seite
angefordert hat.

\section{Suchfunktion}
\label{sec:Suchfunktion_rel}

Die Suchfunktion ist in einer eigenen \ac{APP} ausgelagert. Die
"`search"'-\ac{APP} stellt die Verbindung zur \sona{elasticsearch} her und fügt
die Daten automatisch in die Suchdatenbank ein.
\\
Die "`search"'-\ac{APP} enthällt neben den automatisch von \sona{Django}
erstellten Dateien die Datei "`search\_index.py"'. Listing
\ref{lst:search_index} zeigt den Quellcode der Datei "`search\_index.py"'.
\begin{lstlisting}[caption={
    Die Datei "`search\_index.py"' verwaltet den Index und die zu indizierenden
    Daten.
} 
\label{lst:search_index},captionpos=t]
class ChemicalIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.EdgeNgramField(document=True, use_template=True)
    name = indexes.CharField(model_attr='name')
    cas = indexes.CharField(model_attr='cas')
    ec_number = indexes.CharField(model_attr='ec_number')
    ec_index_number = indexes.CharField(model_attr='ec_index_number')
    hill_formula = indexes.CharField(model_attr='hill_formula')
    pub_date = indexes.DateTimeField(model_attr='pub_date')

    def get_model(self):
        return Chemical

    def index_queryset(self, using=None):
        return self.get_model().objects.
            filter(pub_date__lte=datetime.datetime.now())
\end{lstlisting}
\\
In den Zeilen 2 bis 8 werden die zu indizierenden Werte einer Chemikalie
definiert. Es handelt sich in den meisten Fällen um Textfelder (CharField).
Dabei werden Werte verwendet, die es erlauben, Chemikalien möglichst eindeutig
zu identifizieren. Auf diese Weise wird die Suchdatenbank schlank und möglichst
schnell gehalten.
\\
Die Klasse "`ChemicalIndex"' hat auch eine Funktion, die es ihr erlaubt
überhaupt auf Chemikalien zuzugreifen (Zeile 10 und 11). Diese Funktion ist
notwendig, damit man schnell Zugriff auf zu aktualisierende Datensätze bekommt
mit der Funktion "`index\_queryset"' bekommt. Das Abrufen von Suchergebnissen
wird mit Standardmethoden der Bibliothek "`haystack"' durchgeführt.
\\
Die "`haystack"'-Bibliothek ist eine speziell zur Anbindung von
\sona{elasticsearch} an \sona{Django}-Projekte entwickelte Programmbibliothek.
Sie verfügt über eine Grundfunktionalität, die der Entwickler nutzen kann, oder
sie gegebenefalls ein wenig anpassen muss.
\\
Zu der Suchfunktion wird ebenfalls ein Template erstellt. Dieses enthällt eine
Suchfeld, um die Anfragen einzugeben. Ebenfalls wird in einer Textdatei
angegeben, in welcher Reihenfolge und welche Felder überhaupt
durchsucht werden können. Die View und auch der Aufbau des Formulars muss
nicht durch den Entwickler, es sei den er möchte ein individuelles Formular
haben, definiert werden. Die "`haystack"'-Bibliothek enthällt all diese Views
und Formulare und stellt sie dem Entwickler zur Verfügung.



